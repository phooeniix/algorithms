GCC224 - Introdução aos Algoritmos
Lista de Exercícios 8


Ordenação


Obs: novos exercícios serão adicionados ao longo dos dias


1 - Escreva um subprograma que verifica se um vetor V[0..n-1] está em ordem crescente.


2 - Implemente quatro versões diferentes do método de ordenação BubbleSort:
1. A versão mais comum que leva os maiores elementos para o final do vetor.
2. Uma versão alternativa que leva os menores elementos para o início do vetor.
3. Ordenação inversa levando os maiores elementos para o início do vetor.
4. Ordenação inversa levando os menores elementos para o final do vetor.


3 - Implemente uma versão alterada do método de ordenação SelectionSort que ordene o vetor inversamente.


4 - No método de ordenação InsertionSort, o primeiro elemento da parte não ordenada do vetor (que chamaremos de pivô) é comparado com os elementos da parte ordenada do vetor até ser colocado em sua posição correta na parde ordenada. Implemente o método InsertionSort mas com uma alteração para exibir em cada linha o pivô e a quantidade de comparações realizadas para encontrar sua posição.


5 - Faça um programa que cadastre as idades de 5 famílias de 3 membros cada (idade do pai, da mãe e do filho). Ordene as famílias em função da idade do pai (do mais velho ao mais novo). Feito isso, imprima a ordenação e a idade do pai e da mãe que possuam filhos da mesma idade. Caso não haja correspondentes , imprima -1.
Exercício elaborado pelo GAP (Grupo de Ajuda a Programação) da UFLA.


Exemplo de entrada:
44 41 17
38 36 14
54 49 19
29 27 6
42 41 14


Saída:
54 49 19
44 41 17
42 41 14
38 36 14
29 27 6
42 41 38 36


6 - Faça um programa que processa um cadastro de um grupo de 5 amigos com idade e a quantidade de dinheiro que eles possuem. Ambas as informações são números inteiros e devem compor um registro que representa um amigo. O programa deve ler os dados de 5 amigos e ordenar esses dados em função da idade de cada um, do mais velho ao mais novo. Depois, o programa deve ler uma quantia e escrever a idade de cada amigo que possua exatamente a quantia buscada. Caso nenhum amigo tenha aquela quantia, o programa deve retornar -1 . Em seguida, o programa deve escrever a média das idades de todos amigos e a quantidade total em dinheiro .
Exercício elaborado pelo GAP (Grupo de Ajuda a Programação) da UFLA.


Entrada
18 15
22 20
17 10
19 15
20 25
15


Saida
19
18
19.2
85


7 - Faça um algoritmo que leia dados de 36 funcionários. Os dados lidos serão identificador (ID) e o salário. Os funcionários devem ser distribuídos em uma matriz de registros de tamanho 6x6. Nas linhas pares, somente devem ir funcionários com ID par. Nas ímpares, funcionários com ID ímpar. É garantida a entrada de 18 funcionários com ID par e 18 funcionários com ID ímpar. 


Feito isso, todos os elementos das linhas pares devem devem ser ordenadas(por ID) e os elementos das linhas ímpares também (separadamente), de forma crescente.
Fonte: Exercício GAP(Grupo de Ajuda a Programação)


Exemplo de entrada:
1 2000  7    1400  13 2000    19  1400    25   900    31   1600
2 1900  8    1300  14 1900    20  1300    26   1000  32   1700
3 1800  9    1200  15 1800    21  1200    27   1100  33   1800
4 1700  10  1100  16 1700    22  1100    28   1200  34   1900
5 1600  11  1000  17 1600    23  1000    29   1300  35   2000
6 1500  12  900    18 1500    24  900      30   1400  36   2100


Saídas:
2   1900   4    1700   6   1500  8   1300   10  1100  12  900
1   2000   3    1800   5   1600  7   1400   9   1200  11  1000
14  1900   16   1700   18  1500  20  1300   22  1100  24  900
13  2000   15   1800   17  1600  19  1400   21  1200  23  1000
26  1000   28   1200   30  1400  32  1700   34  1900  36  2100
25  900    27   1100   29  1300  31  1600   33  1800  35  2000


8 - Faça um algoritmo que leia 5 funcionários (matrícula, nome e salário). O algoritmo deve pesquisar um determinado empregado pelo número de matrícula (método binário) e apresentar de forma ordenada (crescente, por salário) os registros dos empregados que recebem salários iguais ou superior a um valor n.


Entradas:
1. 5 funcionários (matrícula, nome e salário)
2. Matricula a ser buscada
3. Valor n


Saídas:
1. Nome do funcionário pesquisado (imprima -1 caso a pesquisa não tenha encontrado ninguém).
2. Todos funcionários de forma ordenada (crescente, por salário) que recebem salários iguais ou superior ao valor n.
Do livro Algoritmos, Lógica para Desenvolvimento de Programação de Computadores 
(modificado, ex. 1,pág 205). 


Exemplo de Entrada:
200 Michel 3000
201 Anderson 2850
202 Fernanda 2600
203 Marcia  2900
204 Pablo 3500
202 
2900


Saída:
Fernanda
Marcia
Michel
Pablo


9 - Em campeonatos de futebol os times podem receber pontos a cada partida. Esses pontos são contabilizados da seguinte forma: o vencedor da partida ganha 3 pontos, o perdedor 0 e caso a partida termine empatada ambos os times ganham 1 ponto.


Faça um programa para calcular a tabela de pontuação (ordenada) dos times de um campeonato a partir dos resultados das partidas. Os dados de cada partida devem ser armazenados em um registro contendo os campos: time da casa, gols do time da casa, time visitante e gols do time visitante. O programa receberá como entrada os dados de cada partida (uma em cada linha no seguinte formato):
timeA 3 x 1 timeB → significa que o time da casa de nome "timeA" venceu a partida por 3 x 1 do time visitante chamado "timeB"


Seu programa deve guardar a tabela de pontuação em um vetor de registros contendo o nome do time e o total de pontos. Por fim, o programa deve ordenar os dados por pontos (do maior para o menor) e exibir os dados (cada registro em uma linha).


Exemplo de Entrada
Cruzeiro 5 x 0 Atletico
Flamengo 1 x 1 Gremio
Cruzeiro 3 x 2 Gremio
Atletico 2 x 2 Flamengo
Flamengo 0 x 3 Cruzeiro
Atletico 0 x 2 Gremio


Exemplo de Saida
Cruzeiro        9
Gremio        4
Flamengo        2
Atletico        1


10 - Faça um programa que ordene um vetor de números inteiros por meio do algoritmo apresentado QuickSort. O algoritmo de ordenação deve ser implementado de modo que a etapa de partição seja implementada em um subprograma e a etapa de recursão seja implementa em outro subprograma.


11 - Escreva uma versão do algoritmo QuickSort com cutoff para vetores pequenos:  quando o vetor a ser ordenado tiver menos que M elementos, a ordenação passa a ser feita por um algoritmo de inserção. O valor de M pode ficar entre 10 e 20.


12 -  a) Escreva um programa em C++ que leia um conjunto de números inteiros e ordene os mesmos utilizando o método BubbleSort. Após a ordenação, imprima o vetor ordenado. Faça a ordenação em subprograma e a exibição do vetor em outro subprograma. 
Obs: o vetor deve ser exibido em uma única linha com os elementos separados por tabulação (\t).


b) Altere o seu algoritmo para que ele exiba o vetor também a cada passo da ordenação (ou seja, exiba o vetor imediatamente antes de cada comparação e também imediatamente após cada troca de elementos, quando houver).


c) Altere o procedimento do item anterior para que ele exiba um asterisco na frente dos elementos que estão sendo comparados a cada passo.


13 - Escreva um programa em C++ que leia um conjunto de 10 produtos de uma farmácia. Cada produto deve ter um número inteiro representando um código de barras, um nome, uma marca e um preço. O programa deve também ordenar o vetor pelo preço dos produtos e então exibir todos os produtos do mais barato para o mais caro (obs: cada produto deve ser exibido em uma linha com os campos separados por tabulação).
